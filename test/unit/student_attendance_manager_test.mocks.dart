// Mocks generated by Mockito 5.4.6 from annotations
// in geo_asist_front/test/unit/student_attendance_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:geo_asist_front/models/api_response_model.dart' as _i2;
import 'package:geo_asist_front/models/asistencia_model.dart' as _i8;
import 'package:geo_asist_front/models/evento_model.dart' as _i10;
import 'package:geo_asist_front/models/location_response_model.dart' as _i5;
import 'package:geo_asist_front/models/usuario_model.dart' as _i13;
import 'package:geo_asist_front/services/asistencia_service.dart' as _i7;
import 'package:geo_asist_front/services/evento_service.dart' as _i9;
import 'package:geo_asist_front/services/location_service.dart' as _i3;
import 'package:geo_asist_front/services/notification_service.dart' as _i11;
import 'package:geo_asist_front/services/storage_service.dart' as _i12;
import 'package:geolocator/geolocator.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiResponse_0<T> extends _i1.SmartFake
    implements _i2.ApiResponse<T> {
  _FakeApiResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i3.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ApiResponse<Map<String, dynamic>>> updateUserLocation({
    required String? userId,
    required double? latitude,
    required double? longitude,
    bool? previousState,
    String? eventoId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserLocation,
          [],
          {
            #userId: userId,
            #latitude: latitude,
            #longitude: longitude,
            #previousState: previousState,
            #eventoId: eventoId,
          },
        ),
        returnValue: _i4.Future<_i2.ApiResponse<Map<String, dynamic>>>.value(
            _FakeApiResponse_0<Map<String, dynamic>>(
          this,
          Invocation.method(
            #updateUserLocation,
            [],
            {
              #userId: userId,
              #latitude: latitude,
              #longitude: longitude,
              #previousState: previousState,
              #eventoId: eventoId,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<Map<String, dynamic>>>);

  @override
  _i4.Future<_i5.LocationResponseModel?> updateUserLocationComplete({
    required String? userId,
    required double? latitude,
    required double? longitude,
    required String? eventoId,
    bool? backgroundUpdate = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserLocationComplete,
          [],
          {
            #userId: userId,
            #latitude: latitude,
            #longitude: longitude,
            #eventoId: eventoId,
            #backgroundUpdate: backgroundUpdate,
          },
        ),
        returnValue: _i4.Future<_i5.LocationResponseModel?>.value(),
      ) as _i4.Future<_i5.LocationResponseModel?>);

  @override
  _i4.Future<_i6.Position?> getCurrentPosition() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentPosition,
          [],
        ),
        returnValue: _i4.Future<_i6.Position?>.value(),
      ) as _i4.Future<_i6.Position?>);
}

/// A class which mocks [AsistenciaService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAsistenciaService extends _i1.Mock implements _i7.AsistenciaService {
  MockAsistenciaService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ApiResponse<_i8.Asistencia>> registrarAsistencia({
    required String? eventoId,
    required double? latitud,
    required double? longitud,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #registrarAsistencia,
          [],
          {
            #eventoId: eventoId,
            #latitud: latitud,
            #longitud: longitud,
          },
        ),
        returnValue: _i4.Future<_i2.ApiResponse<_i8.Asistencia>>.value(
            _FakeApiResponse_0<_i8.Asistencia>(
          this,
          Invocation.method(
            #registrarAsistencia,
            [],
            {
              #eventoId: eventoId,
              #latitud: latitud,
              #longitud: longitud,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<_i8.Asistencia>>);

  @override
  _i4.Future<_i2.ApiResponse<Map<String, dynamic>>> obtenerMetricasEvento(
          String? eventoId) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerMetricasEvento,
          [eventoId],
        ),
        returnValue: _i4.Future<_i2.ApiResponse<Map<String, dynamic>>>.value(
            _FakeApiResponse_0<Map<String, dynamic>>(
          this,
          Invocation.method(
            #obtenerMetricasEvento,
            [eventoId],
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<Map<String, dynamic>>>);

  @override
  _i4.Future<_i2.ApiResponse<Map<String, dynamic>>>
      obtenerEstadisticasEstudiante(String? estudianteId) =>
          (super.noSuchMethod(
            Invocation.method(
              #obtenerEstadisticasEstudiante,
              [estudianteId],
            ),
            returnValue:
                _i4.Future<_i2.ApiResponse<Map<String, dynamic>>>.value(
                    _FakeApiResponse_0<Map<String, dynamic>>(
              this,
              Invocation.method(
                #obtenerEstadisticasEstudiante,
                [estudianteId],
              ),
            )),
          ) as _i4.Future<_i2.ApiResponse<Map<String, dynamic>>>);
}

/// A class which mocks [EventoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventoService extends _i1.Mock implements _i9.EventoService {
  MockEventoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i10.Evento>> obtenerEventos() => (super.noSuchMethod(
        Invocation.method(
          #obtenerEventos,
          [],
        ),
        returnValue: _i4.Future<List<_i10.Evento>>.value(<_i10.Evento>[]),
      ) as _i4.Future<List<_i10.Evento>>);

  @override
  _i4.Future<_i10.Evento?> obtenerEventoPorId(String? eventoId) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerEventoPorId,
          [eventoId],
        ),
        returnValue: _i4.Future<_i10.Evento?>.value(),
      ) as _i4.Future<_i10.Evento?>);

  @override
  _i4.Future<_i2.ApiResponse<_i10.Evento>> crearEvento({
    required String? titulo,
    String? descripcion,
    required String? tipo,
    required String? lugar,
    required int? capacidadMaxima,
    required double? latitud,
    required double? longitud,
    required DateTime? fecha,
    required DateTime? horaInicio,
    required DateTime? horaFinal,
    double? rangoPermitido = 100.0,
    int? tiempoGracia = 10,
    int? maximoSalidas = 3,
    int? tiempoLimiteSalida = 15,
    bool? verificacionContinua = true,
    bool? requiereJustificacion = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #crearEvento,
          [],
          {
            #titulo: titulo,
            #descripcion: descripcion,
            #tipo: tipo,
            #lugar: lugar,
            #capacidadMaxima: capacidadMaxima,
            #latitud: latitud,
            #longitud: longitud,
            #fecha: fecha,
            #horaInicio: horaInicio,
            #horaFinal: horaFinal,
            #rangoPermitido: rangoPermitido,
            #tiempoGracia: tiempoGracia,
            #maximoSalidas: maximoSalidas,
            #tiempoLimiteSalida: tiempoLimiteSalida,
            #verificacionContinua: verificacionContinua,
            #requiereJustificacion: requiereJustificacion,
          },
        ),
        returnValue: _i4.Future<_i2.ApiResponse<_i10.Evento>>.value(
            _FakeApiResponse_0<_i10.Evento>(
          this,
          Invocation.method(
            #crearEvento,
            [],
            {
              #titulo: titulo,
              #descripcion: descripcion,
              #tipo: tipo,
              #lugar: lugar,
              #capacidadMaxima: capacidadMaxima,
              #latitud: latitud,
              #longitud: longitud,
              #fecha: fecha,
              #horaInicio: horaInicio,
              #horaFinal: horaFinal,
              #rangoPermitido: rangoPermitido,
              #tiempoGracia: tiempoGracia,
              #maximoSalidas: maximoSalidas,
              #tiempoLimiteSalida: tiempoLimiteSalida,
              #verificacionContinua: verificacionContinua,
              #requiereJustificacion: requiereJustificacion,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<_i10.Evento>>);

  @override
  _i4.Future<_i2.ApiResponse<_i10.Evento>> actualizarEvento(
    String? eventoId,
    Map<String, dynamic>? datosActualizados,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #actualizarEvento,
          [
            eventoId,
            datosActualizados,
          ],
        ),
        returnValue: _i4.Future<_i2.ApiResponse<_i10.Evento>>.value(
            _FakeApiResponse_0<_i10.Evento>(
          this,
          Invocation.method(
            #actualizarEvento,
            [
              eventoId,
              datosActualizados,
            ],
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<_i10.Evento>>);

  @override
  _i4.Future<_i2.ApiResponse<_i10.Evento>> editarEvento({
    required String? eventoId,
    required String? titulo,
    String? descripcion,
    required String? tipo,
    required String? lugar,
    required int? capacidadMaxima,
    required double? latitud,
    required double? longitud,
    required DateTime? fecha,
    required DateTime? horaInicio,
    required DateTime? horaFinal,
    double? rangoPermitido = 100.0,
    int? tiempoGracia = 1,
    int? maximoSalidas = 3,
    int? tiempoLimiteSalida = 30,
    bool? verificacionContinua = true,
    bool? requiereJustificacion = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editarEvento,
          [],
          {
            #eventoId: eventoId,
            #titulo: titulo,
            #descripcion: descripcion,
            #tipo: tipo,
            #lugar: lugar,
            #capacidadMaxima: capacidadMaxima,
            #latitud: latitud,
            #longitud: longitud,
            #fecha: fecha,
            #horaInicio: horaInicio,
            #horaFinal: horaFinal,
            #rangoPermitido: rangoPermitido,
            #tiempoGracia: tiempoGracia,
            #maximoSalidas: maximoSalidas,
            #tiempoLimiteSalida: tiempoLimiteSalida,
            #verificacionContinua: verificacionContinua,
            #requiereJustificacion: requiereJustificacion,
          },
        ),
        returnValue: _i4.Future<_i2.ApiResponse<_i10.Evento>>.value(
            _FakeApiResponse_0<_i10.Evento>(
          this,
          Invocation.method(
            #editarEvento,
            [],
            {
              #eventoId: eventoId,
              #titulo: titulo,
              #descripcion: descripcion,
              #tipo: tipo,
              #lugar: lugar,
              #capacidadMaxima: capacidadMaxima,
              #latitud: latitud,
              #longitud: longitud,
              #fecha: fecha,
              #horaInicio: horaInicio,
              #horaFinal: horaFinal,
              #rangoPermitido: rangoPermitido,
              #tiempoGracia: tiempoGracia,
              #maximoSalidas: maximoSalidas,
              #tiempoLimiteSalida: tiempoLimiteSalida,
              #verificacionContinua: verificacionContinua,
              #requiereJustificacion: requiereJustificacion,
            },
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<_i10.Evento>>);

  @override
  _i4.Future<_i2.ApiResponse<bool>> eliminarEvento(String? eventoId) =>
      (super.noSuchMethod(
        Invocation.method(
          #eliminarEvento,
          [eventoId],
        ),
        returnValue:
            _i4.Future<_i2.ApiResponse<bool>>.value(_FakeApiResponse_0<bool>(
          this,
          Invocation.method(
            #eliminarEvento,
            [eventoId],
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<bool>>);

  @override
  _i4.Future<List<_i10.Evento>> obtenerEventosDocente(String? docenteId) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerEventosDocente,
          [docenteId],
        ),
        returnValue: _i4.Future<List<_i10.Evento>>.value(<_i10.Evento>[]),
      ) as _i4.Future<List<_i10.Evento>>);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i11.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> showEventActiveNotification({
    required String? eventName,
    required String? eventId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showEventActiveNotification,
          [],
          {
            #eventName: eventName,
            #eventId: eventId,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> showGeofenceEnteredNotification(
          {required String? eventName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #showGeofenceEnteredNotification,
          [],
          {#eventName: eventName},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> showGeofenceExitedNotification({
    required String? eventName,
    double? distance,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showGeofenceExitedNotification,
          [],
          {
            #eventName: eventName,
            #distance: distance,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> showGracePeriodStartedNotification(
          {required int? remainingSeconds}) =>
      (super.noSuchMethod(
        Invocation.method(
          #showGracePeriodStartedNotification,
          [],
          {#remainingSeconds: remainingSeconds},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> showGracePeriodExpiredNotification() => (super.noSuchMethod(
        Invocation.method(
          #showGracePeriodExpiredNotification,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> showAttendanceRegisteredNotification(
          {required String? eventName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #showAttendanceRegisteredNotification,
          [],
          {#eventName: eventName},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> showTrackingPausedNotification() => (super.noSuchMethod(
        Invocation.method(
          #showTrackingPausedNotification,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> showTrackingResumedNotification() => (super.noSuchMethod(
        Invocation.method(
          #showTrackingResumedNotification,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearAllNotifications() => (super.noSuchMethod(
        Invocation.method(
          #clearAllNotifications,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cancelNotification(String? notificationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelNotification,
          [notificationId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i12.StorageService {
  MockStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> saveToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #saveToken,
          [token],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> getToken() => (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> saveUser(_i13.Usuario? usuario) => (super.noSuchMethod(
        Invocation.method(
          #saveUser,
          [usuario],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i13.Usuario?> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i4.Future<_i13.Usuario?>.value(),
      ) as _i4.Future<_i13.Usuario?>);

  @override
  _i4.Future<String?> getUserRole() => (super.noSuchMethod(
        Invocation.method(
          #getUserRole,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> getUserId() => (super.noSuchMethod(
        Invocation.method(
          #getUserId,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
