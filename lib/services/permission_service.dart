// lib/services/permission_service.dart
import 'dart:async';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:geolocator/geolocator.dart';
import 'package:device_info_plus/device_info_plus.dart';

/// Tipo de resultado para permisos de ubicaci√≥n
enum LocationPermissionResult {
  granted,
  denied,
  deniedForever,
  restrictedBackground,
  notPrecise,
  serviceDisabled,
  error,
}

/// Servicio para gestionar permisos cr√≠ticos con validaci√≥n estricta
class PermissionService {
  static final PermissionService _instance = PermissionService._internal();
  factory PermissionService() => _instance;
  PermissionService._internal();

  // üéØ VALIDACI√ìN DE UBICACI√ìN PRECISA OBLIGATORIA

  /// Validar si la ubicaci√≥n precisa est√° otorgada
  Future<bool> isPreciseLocationGranted() async {
    try {
      debugPrint('üîç Validando permisos de ubicaci√≥n precisa');

      // 1. Verificar permisos b√°sicos de ubicaci√≥n
      final locationPermission = await Geolocator.checkPermission();

      if (locationPermission == LocationPermission.denied ||
          locationPermission == LocationPermission.deniedForever) {
        debugPrint('‚ùå Permisos de ubicaci√≥n denegados');
        return false;
      }

      // 2. Verificar configuraci√≥n de precisi√≥n
      final serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        debugPrint('‚ùå Servicios de ubicaci√≥n deshabilitados');
        return false;
      }

      // 3. Verificar precisi√≥n en Android
      if (Platform.isAndroid) {
        final hasAccuracyPermission = await _checkAndroidLocationAccuracy();
        if (!hasAccuracyPermission) {
          debugPrint('‚ùå Ubicaci√≥n precisa no otorgada en Android');
          return false;
        }
      }

      // 4. Probar obtener ubicaci√≥n con alta precisi√≥n
      try {
        final position = await Geolocator.getCurrentPosition(
          locationSettings: const LocationSettings(
            accuracy: LocationAccuracy.best,
            distanceFilter: 5,
          ),
        );

        final isAccurate = position.accuracy <= 20.0; // M√°ximo 20 metros

        debugPrint('üìç Ubicaci√≥n obtenida - Precisi√≥n: ${position.accuracy}m');
        debugPrint(
            isAccurate ? '‚úÖ Precisi√≥n aceptable' : '‚ùå Precisi√≥n insuficiente');

        return isAccurate;
      } catch (e) {
        debugPrint('‚ùå Error obteniendo ubicaci√≥n precisa: $e');
        return false;
      }
    } catch (e) {
      debugPrint('‚ùå Error validando ubicaci√≥n precisa: $e');
      return false;
    }
  }

  /// Solicitar permisos de ubicaci√≥n precisa
  Future<bool> requestPreciseLocationPermission() async {
    try {
      debugPrint('üì≤ Solicitando permisos de ubicaci√≥n precisa');

      // 1. Solicitar permisos b√°sicos de ubicaci√≥n
      LocationPermission permission = await Geolocator.checkPermission();

      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
      }

      if (permission == LocationPermission.deniedForever) {
        debugPrint('‚ùå Permisos denegados permanentemente');
        await _showLocationSettingsDialog();
        return false;
      }

      if (permission == LocationPermission.denied) {
        debugPrint('‚ùå Permisos de ubicaci√≥n denegados');
        return false;
      }

      // 2. En Android, verificar ubicaci√≥n precisa espec√≠ficamente
      if (Platform.isAndroid) {
        final preciseGranted = await _requestAndroidPreciseLocation();
        if (!preciseGranted) {
          debugPrint('‚ùå Ubicaci√≥n precisa no otorgada');
          return false;
        }
      }

      // 3. Validar que realmente funcione
      final isWorking = await isPreciseLocationGranted();

      debugPrint(isWorking
          ? '‚úÖ Ubicaci√≥n precisa configurada correctamente'
          : '‚ùå Configuraci√≥n de ubicaci√≥n incorrecta');
      return isWorking;
    } catch (e) {
      debugPrint('‚ùå Error solicitando ubicaci√≥n precisa: $e');
      return false;
    }
  }

  // üéØ PERMISOS DE BACKGROUND OBLIGATORIOS

  /// Solicitar permisos de background
  Future<bool> requestBackgroundPermission() async {
    try {
      debugPrint('üîÑ Solicitando permisos de background');

      // 1. Verificar versi√≥n de Android
      if (Platform.isAndroid) {
        final androidInfo = await DeviceInfoPlugin().androidInfo;
        debugPrint('üì± Android version: ${androidInfo.version.sdkInt}');

        // Android 10+ requiere background location
        if (androidInfo.version.sdkInt >= 29) {
          final backgroundGranted = await _requestAndroidBackgroundLocation();
          if (!backgroundGranted) {
            debugPrint('‚ùå Background location no otorgado');
            return false;
          }
        }
      }

      // 2. Solicitar exenci√≥n de optimizaci√≥n de bater√≠a
      final batteryOptimizationDisabled =
          await requestBatteryOptimizationExemption();

      // 3. Verificar permisos adicionales necesarios
      final additionalPermissions =
          await _requestAdditionalBackgroundPermissions();

      final allGranted = batteryOptimizationDisabled && additionalPermissions;

      debugPrint(allGranted
          ? '‚úÖ Permisos de background configurados'
          : '‚ùå Faltan permisos de background');
      return allGranted;
    } catch (e) {
      debugPrint('‚ùå Error solicitando permisos de background: $e');
      return false;
    }
  }

  /// Solicitar exenci√≥n de optimizaci√≥n de bater√≠a
  Future<bool> requestBatteryOptimizationExemption() async {
    try {
      debugPrint('üîã Solicitando exenci√≥n de optimizaci√≥n de bater√≠a');

      if (Platform.isAndroid) {
        // Verificar si ya est√° exenta
        final isIgnoring =
            await Permission.ignoreBatteryOptimizations.isGranted;

        if (isIgnoring) {
          debugPrint('‚úÖ Ya exenta de optimizaci√≥n de bater√≠a');
          return true;
        }

        // Solicitar exenci√≥n
        final status = await Permission.ignoreBatteryOptimizations.request();

        if (status.isGranted) {
          debugPrint('‚úÖ Exenci√≥n de bater√≠a otorgada');
          return true;
        } else {
          debugPrint('‚ùå Exenci√≥n de bater√≠a denegada');
          await _showBatteryOptimizationDialog();
          return false;
        }
      }

      // En iOS no es necesario
      return true;
    } catch (e) {
      debugPrint('‚ùå Error configurando exenci√≥n de bater√≠a: $e');
      return false;
    }
  }

  // üéØ CONFIGURACI√ìN DE FOREGROUND SERVICE

  /// Configurar servicio foreground
  Future<bool> setupForegroundService() async {
    try {
      debugPrint('‚öôÔ∏è Configurando servicio foreground');

      if (Platform.isAndroid) {
        // Verificar permisos de notificaciones
        final notificationStatus = await Permission.notification.status;

        if (!notificationStatus.isGranted) {
          final granted = await Permission.notification.request();
          if (!granted.isGranted) {
            debugPrint('‚ùå Permisos de notificaci√≥n denegados');
            return false;
          }
        }

        // En Android 14+, verificar permiso espec√≠fico de foreground service
        final androidInfo = await DeviceInfoPlugin().androidInfo;
        if (androidInfo.version.sdkInt >= 34) {
          final foregroundServiceStatus =
              await Permission.systemAlertWindow.status;
          if (!foregroundServiceStatus.isGranted) {
            await Permission.systemAlertWindow.request();
          }
        }
      }

      debugPrint('‚úÖ Servicio foreground configurado');
      return true;
    } catch (e) {
      debugPrint('‚ùå Error configurando foreground service: $e');
      return false;
    }
  }

  // üéØ MONITOREO CONTINUO DE PERMISOS

  /// Monitorear cambios en permisos
  Stream<PermissionStatus> monitorPermissionChanges() async* {
    while (true) {
      try {
        final hasLocation = await isPreciseLocationGranted();
        final hasBackground = await _checkBackgroundPermissions();

        if (hasLocation && hasBackground) {
          yield PermissionStatus.granted;
        } else {
          yield PermissionStatus.denied;
        }

        // Verificar cada 10 minutos
        await Future.delayed(const Duration(minutes: 10));
      } catch (e) {
        debugPrint('‚ùå Error monitoreando permisos: $e');
        yield PermissionStatus.permanentlyDenied;
        await Future.delayed(const Duration(minutes: 10));
      }
    }
  }

  // üéØ M√âTODOS ESPEC√çFICOS DE ANDROID

  Future<bool> _checkAndroidLocationAccuracy() async {
    try {
      // En Android 12+, verificar ACCESS_FINE_LOCATION espec√≠ficamente
      final androidInfo = await DeviceInfoPlugin().androidInfo;

      if (androidInfo.version.sdkInt >= 31) {
        // Android 12+ tiene control granular de precisi√≥n
        final fineLocation = await Permission.locationWhenInUse.isGranted;
        final preciseLocation = await Permission.location.isGranted;

        return fineLocation && preciseLocation;
      } else {
        // Versiones anteriores, verificar que funcione la ubicaci√≥n precisa
        return await Permission.location.isGranted;
      }
    } catch (e) {
      debugPrint('‚ùå Error verificando precisi√≥n Android: $e');
      return false;
    }
  }

  Future<bool> _requestAndroidPreciseLocation() async {
    try {
      // Solicitar permisos espec√≠ficos para ubicaci√≥n precisa
      final permissions = <Permission>[];

      permissions.add(Permission.location);
      permissions.add(Permission.locationWhenInUse);

      final androidInfo = await DeviceInfoPlugin().androidInfo;

      // Android 12+ requiere permisos espec√≠ficos de precisi√≥n
      if (androidInfo.version.sdkInt >= 31) {
        permissions.add(Permission.locationAlways);
      }

      final statuses = await permissions.request();

      final allGranted = statuses.values.every((status) => status.isGranted);

      debugPrint('üìç Permisos de ubicaci√≥n Android: $allGranted');
      return allGranted;
    } catch (e) {
      debugPrint('‚ùå Error solicitando ubicaci√≥n precisa Android: $e');
      return false;
    }
  }

  Future<bool> _requestAndroidBackgroundLocation() async {
    try {
      debugPrint('üîÑ Solicitando background location en Android');

      // Verificar si ya est√° otorgado
      final currentStatus = await Permission.locationAlways.status;

      if (currentStatus.isGranted) {
        debugPrint('‚úÖ Background location ya otorgado');
        return true;
      }

      // Solicitar permiso
      final status = await Permission.locationAlways.request();

      if (status.isGranted) {
        debugPrint('‚úÖ Background location otorgado');
        return true;
      } else {
        debugPrint('‚ùå Background location denegado');
        await _showBackgroundLocationDialog();
        return false;
      }
    } catch (e) {
      debugPrint('‚ùå Error solicitando background location Android: $e');
      return false;
    }
  }

  Future<bool> _requestAdditionalBackgroundPermissions() async {
    try {
      final permissions = <Permission>[];

      if (Platform.isAndroid) {
        permissions.addAll([
          Permission.notification,
          Permission.systemAlertWindow,
          Permission.accessNotificationPolicy,
        ]);
      }

      final statuses = await permissions.request();

      // No todos son obligatorios, pero mejoran la funcionalidad
      final criticalGranted =
          statuses[Permission.notification]?.isGranted ?? true;

      debugPrint('üîî Permisos adicionales: cr√≠ticos=$criticalGranted');
      return criticalGranted;
    } catch (e) {
      debugPrint('‚ùå Error solicitando permisos adicionales: $e');
      return true; // No bloquear por estos permisos
    }
  }

  Future<bool> _checkBackgroundPermissions() async {
    try {
      if (Platform.isAndroid) {
        final androidInfo = await DeviceInfoPlugin().androidInfo;

        // Android 10+ requiere background location
        if (androidInfo.version.sdkInt >= 29) {
          final backgroundLocation = await Permission.locationAlways.isGranted;
          if (!backgroundLocation) return false;
        }

        // Verificar exenci√≥n de optimizaci√≥n de bater√≠a
        final batteryOptimization =
            await Permission.ignoreBatteryOptimizations.isGranted;
        return batteryOptimization;
      }

      return true; // iOS no requiere estos permisos espec√≠ficos
    } catch (e) {
      debugPrint('‚ùå Error verificando permisos background: $e');
      return false;
    }
  }

  // üéØ DI√ÅLOGOS EDUCATIVOS

  Future<void> _showLocationSettingsDialog() async {
    debugPrint('üìã Mostrando di√°logo de configuraci√≥n de ubicaci√≥n');

    // En una implementaci√≥n real, aqu√≠ se abrir√≠a la configuraci√≥n del sistema
    // Por ahora solo loggeamos para debugging
    debugPrint(
        'üí° Usuario debe ir a Configuraci√≥n > Aplicaciones > GeoAsist > Permisos > Ubicaci√≥n > Precisa');
  }

  Future<void> _showBatteryOptimizationDialog() async {
    debugPrint('üìã Mostrando di√°logo de optimizaci√≥n de bater√≠a');

    debugPrint(
        'üí° Usuario debe ir a Configuraci√≥n > Bater√≠a > Optimizaci√≥n de bater√≠a > Todas las apps > GeoAsist > No optimizar');
  }

  Future<void> _showBackgroundLocationDialog() async {
    debugPrint('üìã Mostrando di√°logo de ubicaci√≥n en background');

    debugPrint(
        'üí° Usuario debe permitir ubicaci√≥n "Siempre" para tracking continuo');
  }

  Future<void> showLocationSettingsDialog() async {
    await _showLocationSettingsDialog();
  }

  // üéØ M√âTODOS UTILITARIOS P√öBLICOS

  /// Validar permisos completos para tracking
  Future<bool> validateAllPermissionsForTracking() async {
    try {
      debugPrint('üîí Validando todos los permisos para tracking');

      final checks = await Future.wait([
        isPreciseLocationGranted(),
        _checkBackgroundPermissions(),
        _checkNotificationPermissions(),
      ]);

      final locationOk = checks[0];
      final backgroundOk = checks[1];
      final notificationOk = checks[2];

      debugPrint(
          'üìä Permisos - Ubicaci√≥n: $locationOk, Background: $backgroundOk, Notificaciones: $notificationOk');

      final allOk = locationOk && backgroundOk && notificationOk;

      debugPrint(allOk
          ? '‚úÖ Todos los permisos validados'
          : '‚ùå Faltan permisos cr√≠ticos');
      return allOk;
    } catch (e) {
      debugPrint('‚ùå Error validando permisos: $e');
      return false;
    }
  }

  Future<bool> _checkNotificationPermissions() async {
    try {
      if (Platform.isAndroid) {
        return await Permission.notification.isGranted;
      }
      return true; // iOS maneja notificaciones diferente
    } catch (e) {
      debugPrint('‚ùå Error verificando notificaciones: $e');
      return false;
    }
  }

  /// Obtener estado detallado de permisos
  Future<Map<String, dynamic>> getDetailedPermissionStatus() async {
    try {
      final status = <String, dynamic>{};

      // Ubicaci√≥n
      final locationPermission = await Geolocator.checkPermission();
      status['location_permission'] = locationPermission.toString();
      status['location_service_enabled'] =
          await Geolocator.isLocationServiceEnabled();
      status['location_precise'] = await isPreciseLocationGranted();

      // Background
      if (Platform.isAndroid) {
        status['background_location'] =
            await Permission.locationAlways.isGranted;
        status['battery_optimization_ignored'] =
            await Permission.ignoreBatteryOptimizations.isGranted;
      }

      // Notificaciones
      status['notifications'] = await Permission.notification.isGranted;

      // Sistema
      status['platform'] = Platform.operatingSystem;
      if (Platform.isAndroid) {
        final androidInfo = await DeviceInfoPlugin().androidInfo;
        status['android_version'] = androidInfo.version.sdkInt;
      }

      debugPrint('üìã Estado detallado de permisos: $status');
      return status;
    } catch (e) {
      debugPrint('‚ùå Error obteniendo estado de permisos: $e');
      return {'error': e.toString()};
    }
  }

  /// Abrir configuraci√≥n de la aplicaci√≥n
  Future<bool> openAppSettings() async {
    try {
      debugPrint('‚öôÔ∏è Abriendo configuraci√≥n de la aplicaci√≥n');
      return await Permission.manageExternalStorage.request().isGranted;
    } catch (e) {
      debugPrint('‚ùå Error abriendo configuraci√≥n: $e');
      return false;
    }
  }

  /// Verificar si los servicios de ubicaci√≥n est√°n habilitados
  Future<bool> isLocationServiceEnabled() async {
    try {
      return await Geolocator.isLocationServiceEnabled();
    } catch (e) {
      debugPrint('‚ùå Error verificando servicios de ubicaci√≥n: $e');
      return false;
    }
  }

  /// Obtener precisi√≥n actual de ubicaci√≥n
  Future<double?> getCurrentLocationAccuracy() async {
    try {
      final position = await Geolocator.getCurrentPosition(
        locationSettings: const LocationSettings(
          accuracy: LocationAccuracy.best,
          distanceFilter: 5,
        ),
      );
      return position.accuracy;
    } catch (e) {
      debugPrint('‚ùå Error obteniendo precisi√≥n: $e');
      return null;
    }
  }

  /// Verificar si la app puede ejecutarse en background
  Future<bool> canRunInBackground() async {
    try {
      if (Platform.isAndroid) {
        final batteryOptimized =
            await Permission.ignoreBatteryOptimizations.isGranted;
        final backgroundLocation = await Permission.locationAlways.isGranted;
        return batteryOptimized && backgroundLocation;
      }
      return true; // iOS maneja esto autom√°ticamente
    } catch (e) {
      debugPrint('‚ùå Error verificando background: $e');
      return false;
    }
  }

  // üéØ CONFIGURACI√ìN AUTOM√ÅTICA

  /// Configurar todos los permisos autom√°ticamente
  Future<Map<String, bool>> requestAllPermissions() async {
    debugPrint('üöÄ Iniciando configuraci√≥n autom√°tica de permisos');

    final results = <String, bool>{};

    try {
      // 1. Ubicaci√≥n precisa
      results['location'] = await requestPreciseLocationPermission();

      // 2. Background
      results['background'] = await requestBackgroundPermission();

      // 3. Foreground service
      results['foreground_service'] = await setupForegroundService();

      // 4. Validaci√≥n final
      results['all_valid'] = await validateAllPermissionsForTracking();

      debugPrint('üìä Resultados configuraci√≥n: $results');

      final success = results.values.every((granted) => granted);
      debugPrint(success
          ? '‚úÖ Configuraci√≥n completa exitosa'
          : '‚ùå Configuraci√≥n incompleta');

      return results;
    } catch (e) {
      debugPrint('‚ùå Error en configuraci√≥n autom√°tica: $e');
      results['error'] = false;
      return results;
    }
  }

  /// Verificar configuraci√≥n cada cierto tiempo
  Future<bool> performPeriodicCheck() async {
    try {
      debugPrint('üîç Verificaci√≥n peri√≥dica de permisos');

      final isValid = await validateAllPermissionsForTracking();

      if (!isValid) {
        debugPrint('‚ö†Ô∏è Permisos han cambiado - requiere nueva configuraci√≥n');
      }

      return isValid;
    } catch (e) {
      debugPrint('‚ùå Error en verificaci√≥n peri√≥dica: $e');
      return false;
    }
  }

  // üéØ LIMPIEZA Y RESET

  /// Limpiar cach√© de permisos
  void clearPermissionCache() {
    debugPrint('üßπ Limpiando cach√© de permisos');
    // En el futuro se puede implementar cach√© local si es necesario
  }

  /// Verificar si es necesario volver a solicitar permisos
  Future<bool> shouldRequestPermissionsAgain() async {
    try {
      final lastCheck = await _getLastPermissionCheck();
      final now = DateTime.now();

      // Verificar cada 24 horas
      if (lastCheck == null || now.difference(lastCheck).inHours >= 24) {
        await _saveLastPermissionCheck(now);
        return true;
      }

      return false;
    } catch (e) {
      debugPrint('‚ùå Error verificando necesidad de permisos: $e');
      return true; // Si hay error, mejor verificar
    }
  }

  Future<DateTime?> _getLastPermissionCheck() async {
    // En una implementaci√≥n real, esto se guardar√≠a en SharedPreferences
    // Por ahora retornamos null para siempre verificar
    return null;
  }

  Future<void> _saveLastPermissionCheck(DateTime date) async {
    // En una implementaci√≥n real, esto se guardar√≠a en SharedPreferences
    debugPrint('üíæ Guardando √∫ltima verificaci√≥n: $date');
  }

  // üéØ INFORMACI√ìN PARA DEBUGGING

  /// Obtener informaci√≥n completa del sistema para debugging
  Future<Map<String, dynamic>> getSystemInfo() async {
    try {
      final info = <String, dynamic>{};

      // Informaci√≥n del dispositivo
      info['platform'] = Platform.operatingSystem;
      info['is_physical_device'] = !kIsWeb;

      if (Platform.isAndroid) {
        final androidInfo = await DeviceInfoPlugin().androidInfo;
        info['android_version'] = androidInfo.version.sdkInt;
        info['android_release'] = androidInfo.version.release;
        info['device_model'] = androidInfo.model;
        info['manufacturer'] = androidInfo.manufacturer;
      }

      // Estado de servicios
      info['location_service_enabled'] =
          await Geolocator.isLocationServiceEnabled();

      // Permisos detallados
      info['permissions'] = await getDetailedPermissionStatus();

      // Capacidades de ubicaci√≥n
      final accuracy = await getCurrentLocationAccuracy();
      info['current_accuracy'] = accuracy;
      info['can_run_background'] = await canRunInBackground();

      debugPrint('üîß Sistema info: $info');
      return info;
    } catch (e) {
      debugPrint('‚ùå Error obteniendo info del sistema: $e');
      return {'error': e.toString()};
    }
  }

  // AGREGAR al final de la clase PermissionService, antes del cierre }

  /// Verificar si tiene permisos de ubicaci√≥n b√°sicos
  Future<bool> hasLocationPermissions() async {
    try {
      final permission = await Geolocator.checkPermission();
      final serviceEnabled = await Geolocator.isLocationServiceEnabled();

      return permission != LocationPermission.denied &&
          permission != LocationPermission.deniedForever &&
          serviceEnabled;
    } catch (e) {
      debugPrint('‚ùå Error verificando permisos de ubicaci√≥n: $e');
      return false;
    }
  }

  /// Obtener ubicaci√≥n actual del dispositivo
  Future<Position?> getCurrentLocation() async {
    try {
      // Verificar permisos primero
      if (!await hasLocationPermissions()) {
        debugPrint('‚ùå Sin permisos de ubicaci√≥n para obtener posici√≥n');
        return null;
      }

      // Obtener ubicaci√≥n con configuraci√≥n moderna
      final position = await Geolocator.getCurrentPosition(
        locationSettings: const LocationSettings(
          accuracy: LocationAccuracy.best,
          distanceFilter: 5,
        ),
      );

      debugPrint(
          'üìç Ubicaci√≥n obtenida: ${position.latitude}, ${position.longitude}');
      return position;
    } catch (e) {
      debugPrint('‚ùå Error obteniendo ubicaci√≥n: $e');
      return null;
    }
  }

  /// Solicitar permisos de ubicaci√≥n con resultado detallado
  Future<LocationPermissionResult> requestLocationPermissions() async {
    try {
      debugPrint('üì≤ Solicitando permisos de ubicaci√≥n');

      final serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        return LocationPermissionResult.serviceDisabled;
      }

      LocationPermission permission = await Geolocator.checkPermission();

      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
      }

      switch (permission) {
        case LocationPermission.denied:
          return LocationPermissionResult.denied;
        case LocationPermission.deniedForever:
          return LocationPermissionResult.deniedForever;
        case LocationPermission.whileInUse:
        case LocationPermission.always:
          return LocationPermissionResult.granted;
        default:
          return LocationPermissionResult.denied;
      }
    } catch (e) {
      debugPrint('‚ùå Error solicitando permisos: $e');
      return LocationPermissionResult.denied;
    }
  }
}
