// lib/services/battery_optimization_service.dart
// üîã SERVICIO ESPECIALIZADO PARA EXENCI√ìN DE OPTIMIZACI√ìN DE BATER√çA
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:flutter/material.dart';
import 'notifications/notification_manager.dart';

/// Servicio especializado para gestionar la exenci√≥n de optimizaci√≥n de bater√≠a
/// CR√çTICO para que el tracking contin√∫e funcionando en background
class BatteryOptimizationService {
  static final BatteryOptimizationService _instance =
      BatteryOptimizationService._internal();
  factory BatteryOptimizationService() => _instance;
  BatteryOptimizationService._internal();

  // üéØ METHODCHANNEL PARA COMUNICACI√ìN NATIVA
  static const MethodChannel _nativeChannel =
      MethodChannel('com.geoasist/foreground_service');

  // üéØ SERVICIOS
  final NotificationManager _notificationManager = NotificationManager();

  // üéØ ESTADO DEL SERVICIO
  bool _isInitialized = false;
  bool _isExemptionGranted = false;
  bool _hasCheckedStatus = false;

  /// Inicializar el servicio de battery optimization
  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      debugPrint('üîã Inicializando BatteryOptimizationService');

      await _notificationManager.initialize();
      await _checkCurrentExemptionStatus();

      _isInitialized = true;
      debugPrint('‚úÖ BatteryOptimizationService inicializado');
    } catch (e) {
      debugPrint('‚ùå Error inicializando BatteryOptimizationService: $e');
      rethrow;
    }
  }

  /// Verificar el estado actual de la exenci√≥n
  Future<bool> _checkCurrentExemptionStatus() async {
    try {
      debugPrint('üîç Verificando estado actual de battery optimization');

      final isIgnored = await _nativeChannel
              .invokeMethod<bool>('isBatteryOptimizationIgnored') ??
          false;

      _isExemptionGranted = isIgnored;
      _hasCheckedStatus = true;

      debugPrint(
          'üìä Estado battery optimization: ${isIgnored ? "EXENTA" : "NO EXENTA"}');

      return isIgnored;
    } catch (e) {
      debugPrint('‚ùå Error verificando battery optimization: $e');
      return false;
    }
  }

  /// üéØ M√âTODO PRINCIPAL: Validar y solicitar exenci√≥n OBLIGATORIA
  Future<bool> ensureBatteryOptimizationExemption({
    required BuildContext context,
    bool showDialogIfNeeded = true,
  }) async {
    try {
      debugPrint('üîã Asegurando exenci√≥n de battery optimization OBLIGATORIA');

      // 1. Verificar estado actual
      final isCurrentlyExempt = await _checkCurrentExemptionStatus();

      if (isCurrentlyExempt) {
        debugPrint('‚úÖ App ya est√° exenta de battery optimization');
        return true;
      }

      // 2. Si no est√° exenta, es OBLIGATORIO solicitarla
      debugPrint('‚ö†Ô∏è App NO est√° exenta - Solicitando exenci√≥n OBLIGATORIA');

      if (showDialogIfNeeded) {
        final userAccepted = await _showBatteryOptimizationDialog(context);
        if (!userAccepted) {
          // Si el usuario rechaza, mostrar que es obligatorio
          await _showMandatoryExemptionDialog(context);
          return false;
        }
      }

      // 3. Solicitar exenci√≥n
      await _requestBatteryOptimizationExemption();

      // 4. Verificar nuevamente despu√©s de la solicitud
      await Future.delayed(const Duration(milliseconds: 500));
      final isNowExempt = await _checkCurrentExemptionStatus();

      if (isNowExempt) {
        debugPrint('‚úÖ Exenci√≥n de battery optimization otorgada exitosamente');
        await _notificationManager.showTestNotification();
        return true;
      } else {
        debugPrint('‚ùå Exenci√≥n no otorgada - Reintentando...');
        return false;
      }
    } catch (e) {
      debugPrint('‚ùå Error en exenci√≥n battery optimization: $e');
      return false;
    }
  }

  /// Solicitar exenci√≥n usando el MethodChannel nativo
  Future<void> _requestBatteryOptimizationExemption() async {
    try {
      debugPrint('üì± Solicitando exenci√≥n de battery optimization');

      await _nativeChannel.invokeMethod('requestBatteryOptimizationExemption');

      debugPrint('‚úÖ Solicitud de exenci√≥n enviada');
    } catch (e) {
      debugPrint('‚ùå Error solicitando exenci√≥n: $e');
      rethrow;
    }
  }

  /// Mostrar di√°logo educativo sobre battery optimization
  Future<bool> _showBatteryOptimizationDialog(BuildContext context) async {
    return await showDialog<bool>(
          context: context,
          barrierDismissible: false, // No se puede cerrar sin responder
          builder: (context) => AlertDialog(
            title: const Row(
              children: [
                Icon(Icons.battery_alert, color: Colors.orange, size: 28),
                SizedBox(width: 12),
                Text('Configuraci√≥n Requerida'),
              ],
            ),
            content: const SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Para garantizar el funcionamiento correcto del tracking de asistencia, necesitamos deshabilitar la optimizaci√≥n de bater√≠a.',
                    style: TextStyle(fontSize: 16),
                  ),
                  SizedBox(height: 16),
                  Text(
                    '¬øPor qu√© es necesario?',
                    style: TextStyle(fontWeight: FontWeight.bold, fontSize: 14),
                  ),
                  SizedBox(height: 8),
                  Text('‚Ä¢ Mantener el tracking activo en background'),
                  Text('‚Ä¢ Evitar que Android cierre la app autom√°ticamente'),
                  Text('‚Ä¢ Garantizar notificaciones en tiempo real'),
                  Text('‚Ä¢ Conservar tu asistencia durante el evento'),
                  SizedBox(height: 16),
                  Text(
                    'Esto NO afectar√° significativamente tu bater√≠a.',
                    style: TextStyle(
                      fontStyle: FontStyle.italic,
                      color: Colors.green,
                      fontSize: 14,
                    ),
                  ),
                ],
              ),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(false),
                child: const Text('No Permitir'),
              ),
              ElevatedButton(
                onPressed: () => Navigator.of(context).pop(true),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.orange,
                  foregroundColor: Colors.white,
                ),
                child: const Text('Configurar Ahora'),
              ),
            ],
          ),
        ) ??
        false;
  }

  /// Di√°logo obligatorio si el usuario rechaza la exenci√≥n
  Future<void> _showMandatoryExemptionDialog(BuildContext context) async {
    await showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.warning, color: Colors.red, size: 28),
            SizedBox(width: 12),
            Text('Configuraci√≥n Obligatoria'),
          ],
        ),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              'La exenci√≥n de optimizaci√≥n de bater√≠a es OBLIGATORIA para usar el sistema de asistencia.',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 16),
            Text(
              'Sin esta configuraci√≥n:',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 8),
            Text('‚ùå El tracking se detendr√° autom√°ticamente'),
            Text('‚ùå Perder√°s tu asistencia sin aviso'),
            Text('‚ùå Las notificaciones no funcionar√°n'),
            SizedBox(height: 16),
            Text(
              'Debes configurar esta opci√≥n para continuar.',
              style: TextStyle(
                color: Colors.red,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
        actions: [
          ElevatedButton(
            onPressed: () => Navigator.of(context).pop(),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              foregroundColor: Colors.white,
            ),
            child: const Text('Entendido - Configurar'),
          ),
        ],
      ),
    );
  }

  /// üéØ VALIDACI√ìN ANTES DE INICIAR TRACKING
  Future<bool> validateBatteryOptimizationForTracking({
    required BuildContext context,
  }) async {
    try {
      debugPrint('üîã Validando battery optimization antes de tracking');

      if (!_isInitialized) {
        await initialize();
      }

      // Verificar estado actual
      final isExempt = await _checkCurrentExemptionStatus();

      if (isExempt) {
        debugPrint('‚úÖ Validation passed - Battery optimization exenta');
        return true;
      }

      // Si no est√° exenta, solicitar OBLIGATORIAMENTE
      debugPrint('‚ö†Ô∏è Validation failed - Solicitando exenci√≥n obligatoria');

      final exemptionGranted = await ensureBatteryOptimizationExemption(
        context: context,
        showDialogIfNeeded: true,
      );

      if (!exemptionGranted) {
        // Mostrar mensaje de error cr√≠tico
        await _showTrackingBlockedDialog(context);
        return false;
      }

      return true;
    } catch (e) {
      debugPrint('‚ùå Error en validaci√≥n battery optimization: $e');
      return false;
    }
  }

  /// Di√°logo cuando el tracking est√° bloqueado por battery optimization
  Future<void> _showTrackingBlockedDialog(BuildContext context) async {
    await showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.block, color: Colors.red, size: 28),
            SizedBox(width: 12),
            Text('Tracking Bloqueado'),
          ],
        ),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              'No puedes unirte al evento sin configurar la exenci√≥n de battery optimization.',
              style: TextStyle(fontSize: 16),
            ),
            SizedBox(height: 16),
            Text(
              'Opciones:',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 8),
            Text('1. Configurar la exenci√≥n ahora'),
            Text('2. Contactar al administrador'),
            Text('3. Usar otro dispositivo'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Volver'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              // Volver a intentar la configuraci√≥n
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.orange,
              foregroundColor: Colors.white,
            ),
            child: const Text('Reintentar'),
          ),
        ],
      ),
    );
  }

  /// üéØ M√âTODOS DE INFORMACI√ìN Y ESTADO

  /// Verificar si la exenci√≥n est√° otorgada
  bool get isExemptionGranted => _isExemptionGranted;

  /// Verificar si el servicio est√° inicializado
  bool get isInitialized => _isInitialized;

  /// Verificar si se ha verificado el estado
  bool get hasCheckedStatus => _hasCheckedStatus;

  /// Obtener estado completo del servicio
  Map<String, dynamic> getServiceStatus() {
    return {
      'initialized': _isInitialized,
      'exemption_granted': _isExemptionGranted,
      'has_checked_status': _hasCheckedStatus,
      'service_available': true,
    };
  }

  /// üéØ M√âTODO PARA TESTING
  Future<void> testBatteryOptimizationStatus() async {
    try {
      debugPrint('üß™ Testing battery optimization status');

      final status = await _checkCurrentExemptionStatus();

      debugPrint('üìä Test results:');
      debugPrint('  - Exemption granted: $status');
      debugPrint('  - Service initialized: $_isInitialized');
      debugPrint('  - Has checked status: $_hasCheckedStatus');

      // Mostrar notificaci√≥n de test
      await _notificationManager.showTestNotification();
    } catch (e) {
      debugPrint('‚ùå Error en test battery optimization: $e');
    }
  }

  /// Re-verificar estado (√∫til despu√©s de cambios manuales)
  Future<bool> refreshExemptionStatus() async {
    debugPrint('üîÑ Refrescando estado de battery optimization');
    return await _checkCurrentExemptionStatus();
  }
}
