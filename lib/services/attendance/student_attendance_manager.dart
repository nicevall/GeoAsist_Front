// lib/services/attendance/student_attendance_manager.dart
import 'dart:async';
import 'package:flutter/widgets.dart';
import '../../models/evento_model.dart';
import '../../models/ubicacion_model.dart';
import '../location_service.dart';
import '../permission_service.dart';
import '../storage_service.dart';
import '../notifications/notification_manager.dart';
import '../asistencia/heartbeat_manager.dart';
import '../asistencia/geofence_manager.dart';
import 'attendance_state_manager.dart';
import 'grace_period_manager.dart';
import '../asistencia/asistencia_service.dart';

/// ‚úÖ STUDENT ATTENDANCE MANAGER MODULAR: Coordinador de tracking
/// Responsabilidades:
/// - Coordinaci√≥n central de todos los managers especializados
/// - App lifecycle management
/// - Tracking principal de estudiante
/// - Integraci√≥n con servicios de localizaci√≥n
/// - Manejo de estados globales de tracking
/// - Sincronizaci√≥n entre todos los componentes
class StudentAttendanceManager {
  static final StudentAttendanceManager _instance = StudentAttendanceManager._internal();
  factory StudentAttendanceManager() => _instance;
  StudentAttendanceManager._internal();

  // üéØ MANAGERS ESPECIALIZADOS
  final HeartbeatManager _heartbeatManager = HeartbeatManager();
  final GeofenceManager _geofenceManager = GeofenceManager();
  final AttendanceStateManager _stateManager = AttendanceStateManager();
  final GracePeriodManager _gracePeriodManager = GracePeriodManager();
  final AsistenciaService _asistenciaService = AsistenciaService();

  // üéØ SERVICIOS
  final LocationService _locationService = LocationService();
  final PermissionService _permissionService = PermissionService();
  final StorageService _storageService = StorageService();
  final NotificationManager _notificationManager = NotificationManager();

  // üéØ ESTADO DE TRACKING
  bool _isTrackingActive = false;
  bool _isAppInForeground = true;
  Evento? _currentEvent;
  Timer? _locationTimer;
  StreamSubscription? _geofenceSubscription;
  StreamSubscription? _gracePeriodSubscription;
  StreamSubscription? _stateSubscription;

  // ‚öôÔ∏è CONFIGURACI√ìN
  static const Duration _locationUpdateInterval = Duration(seconds: 10);

  // üîÑ STREAMS
  final StreamController<StudentTrackingState> _trackingController = 
      StreamController<StudentTrackingState>.broadcast();

  /// Stream para escuchar cambios de estado de tracking
  Stream<StudentTrackingState> get trackingStream => _trackingController.stream;

  /// ‚úÖ INICIALIZAR TRACKING PARA EVENTO
  Future<bool> startTrackingForEvent(Evento evento) async {
    debugPrint('üéØ [StudentAttendanceManager] Starting tracking for: ${evento.titulo}');

    try {
      // 1. Verificar permisos
      final permissionResult = await _permissionService.requestLocationPermissions();
      if (permissionResult != LocationPermissionResult.granted) {
        debugPrint('‚ùå Location permissions not granted');
        return false;
      }

      // 2. Configurar evento actual
      _currentEvent = evento;

      // 3. Configurar managers especializados
      _geofenceManager.configureEvent(evento);
      _stateManager.initializeForEvent(evento.id!);

      // 4. Configurar suscripciones
      _setupSubscriptions();

      // 5. Iniciar heartbeat
      await _heartbeatManager.startHeartbeat(eventoId: evento.id!);

      // 6. Iniciar tracking de ubicaci√≥n
      _startLocationTracking();

      // 7. Actualizar estado de app
      _updateAppLifecycleState();

      _isTrackingActive = true;
      _emitTrackingState(StudentTrackingStatus.active);

      debugPrint('‚úÖ Tracking started successfully for event: ${evento.titulo}');
      return true;

    } catch (e) {
      debugPrint('‚ùå Error starting tracking: $e');
      await stopTracking();
      return false;
    }
  }

  /// ‚úÖ DETENER TRACKING
  Future<void> stopTracking() async {
    debugPrint('üõë [StudentAttendanceManager] Stopping tracking');

    try {
      _isTrackingActive = false;

      // 1. Detener heartbeat
      await _heartbeatManager.stopHeartbeat();

      // 2. Cancelar grace periods activos
      await _gracePeriodManager.cancelAllGracePeriods();

      // 3. Detener location tracking
      _locationTimer?.cancel();
      _locationTimer = null;

      // 4. Cancelar suscripciones
      _geofenceSubscription?.cancel();
      _gracePeriodSubscription?.cancel();
      _stateSubscription?.cancel();

      // 5. Limpiar estados
      _currentEvent = null;
      _stateManager.clearState();

      // 6. Limpiar notificaciones
      await _notificationManager.clearAllNotifications();

      _emitTrackingState(StudentTrackingStatus.stopped);
      debugPrint('‚úÖ Tracking stopped successfully');

    } catch (e) {
      debugPrint('‚ùå Error stopping tracking: $e');
    }
  }

  /// ‚úÖ MANEJAR CAMBIOS DE LIFECYCLE DE APP
  void handleAppLifecycleChange(AppLifecycleState state) {
    debugPrint('üì± [StudentAttendanceManager] App lifecycle changed: $state');

    final isInForeground = state == AppLifecycleState.resumed;
    
    if (_isAppInForeground == isInForeground) {
      return; // Sin cambios
    }

    _isAppInForeground = isInForeground;

    // Actualizar estado en managers
    _heartbeatManager.updateAppState(isInForeground: isInForeground);

    if (isInForeground) {
      _handleAppReturned();
    } else {
      _handleAppClosed();
    }
  }

  /// üîÑ CONFIGURAR SUSCRIPCIONES A MANAGERS
  void _setupSubscriptions() {
    // 1. Suscribirse a eventos de geofence
    _geofenceSubscription = _geofenceManager.geofenceStream.listen((event) {
      _handleGeofenceEvent(event);
    });

    // 2. Suscribirse a grace periods
    _gracePeriodSubscription = _gracePeriodManager.gracePeriodStream.listen((event) {
      _handleGracePeriodEvent(event);
    });

    // 3. Suscribirse a cambios de estado de asistencia
    _stateSubscription = _stateManager.stateStream.listen((change) {
      _handleAttendanceStateChange(change);
    });
  }

  /// üìç INICIAR TRACKING DE UBICACI√ìN
  void _startLocationTracking() {
    debugPrint('üìç Starting location tracking timer');

    _locationTimer = Timer.periodic(_locationUpdateInterval, (timer) async {
      if (!_isTrackingActive) {
        timer.cancel();
        return;
      }

      await _performLocationUpdate();
    });

    // Realizar primera actualizaci√≥n inmediatamente
    _performLocationUpdate();
  }

  /// üìç REALIZAR ACTUALIZACI√ìN DE UBICACI√ìN
  Future<void> _performLocationUpdate() async {
    if (!_isTrackingActive || _currentEvent == null) return;

    try {
      // 1. Obtener ubicaci√≥n actual
      final location = await _locationService.getCurrentPosition();
      if (location == null) {
        debugPrint('‚ö†Ô∏è Failed to get current location');
        return;
      }
      debugPrint('üìç Location update: ${location.latitude}, ${location.longitude}');

      // 2. Verificar geofence
      final geofenceResult = _geofenceManager.checkPosition(
        location.latitude,
        location.longitude,
        accuracy: location.accuracy,
      );

      if (!geofenceResult.isSuccess) {
        debugPrint('‚ö†Ô∏è Geofence check failed: ${geofenceResult.error}');
        return;
      }

      // 3. Actualizar estado de asistencia
      _stateManager.updateStateBasedOnPosition(
        latitude: location.latitude,
        longitude: location.longitude,
        distance: geofenceResult.distance!,
        allowedRadius: _currentEvent!.rangoPermitido,
        eventStartTime: _currentEvent!.horaInicio,
      );

      // 4. Actualizar ubicaci√≥n en backend
      await _asistenciaService.actualizarUbicacion(
        latitud: location.latitude,
        longitud: location.longitude,
        eventoId: _currentEvent!.id,
      );

    } catch (e) {
      debugPrint('‚ùå Error in location update: $e');
    }
  }

  /// üö® MANEJAR EVENTO DE GEOFENCE
  void _handleGeofenceEvent(GeofenceEvent event) {
    debugPrint('üö® Geofence event: ${event.type}');

    switch (event.type) {
      case GeofenceEventType.entered:
        _handleGeofenceEntered(event);
        break;
      case GeofenceEventType.exited:
        _handleGeofenceExited(event);
        break;
    }
  }

  /// ‚úÖ MANEJAR ENTRADA A GEOFENCE
  void _handleGeofenceEntered(GeofenceEvent event) {
    debugPrint('‚úÖ Student entered geofence');

    // Cancelar grace period de geofence si est√° activo
    if (_gracePeriodManager.isGeofenceGraceActive) {
      _gracePeriodManager.cancelGeofenceGracePeriod();
    }

    // Intentar registrar asistencia autom√°ticamente
    _attemptAutomaticAttendanceRegistration(event.location);
  }

  /// üö® MANEJAR SALIDA DE GEOFENCE
  void _handleGeofenceExited(GeofenceEvent event) {
    debugPrint('üö® Student exited geofence');

    // Iniciar grace period de geofence (60 segundos)
    _gracePeriodManager.startGeofenceGracePeriod();
  }

  /// üìù INTENTAR REGISTRO AUTOM√ÅTICO DE ASISTENCIA
  Future<void> _attemptAutomaticAttendanceRegistration(Ubicacion location) async {
    if (_currentEvent == null) return;

    try {
      debugPrint('üìù Attempting automatic attendance registration');

      final user = await _storageService.getUser();
      if (user == null) {
        debugPrint('‚ùå No user found for attendance registration');
        return;
      }

      final result = await _asistenciaService.registrarAsistencia(
        eventoId: _currentEvent!.id!,
        usuarioId: user.id,
        latitud: location.latitud,
        longitud: location.longitud,
      );

      if (result.success) {
        debugPrint('‚úÖ Automatic attendance registration successful');
        await _notificationManager.showAttendanceRegisteredNotification();
      } else {
        debugPrint('‚ùå Automatic attendance registration failed: ${result.error}');
      }

    } catch (e) {
      debugPrint('‚ùå Error in automatic attendance registration: $e');
    }
  }

  /// ‚è∞ MANEJAR EVENTOS DE GRACE PERIOD
  void _handleGracePeriodEvent(GracePeriodEvent event) {
    debugPrint('‚è∞ Grace period event: ${event.type} (${event.remaining}s remaining)');

    switch (event.type) {
      case GracePeriodEventType.geofenceExpired:
        _handleGeofenceGraceExpired();
        break;
      case GracePeriodEventType.appClosedExpired:
        _handleAppClosedGraceExpired();
        break;
      default:
        break;
    }
  }

  /// üö® MANEJAR EXPIRACI√ìN DE GRACE PERIOD GEOFENCE
  void _handleGeofenceGraceExpired() {
    debugPrint('üö® Geofence grace period expired - marking as boundary violation');
    
    // Marcar como violaci√≥n de l√≠mites
    _emitTrackingState(StudentTrackingStatus.boundaryViolation);
  }

  /// üö® MANEJAR EXPIRACI√ìN DE GRACE PERIOD APP CERRADA
  void _handleAppClosedGraceExpired() {
    debugPrint('üö® App closed grace period expired - marking as absent');
    
    // Marcar como ausente por app cerrada
    _markAsAbsent('App cerrada por m√°s de 30 segundos');
  }

  /// üìä MANEJAR CAMBIOS DE ESTADO DE ASISTENCIA
  void _handleAttendanceStateChange(AttendanceStateChange change) {
    debugPrint('üìä Attendance state changed: ${change.fromState} -> ${change.toState}');
    
    // Emitir estado de tracking actualizado
    _emitTrackingState(_getTrackingStatusFromAttendanceState(change.toState));
  }

  /// üì± MANEJAR APP REGRESANDO A FOREGROUND
  void _handleAppReturned() {
    debugPrint('üì± App returned to foreground');

    // Cancelar grace period de app cerrada si est√° activo
    if (_gracePeriodManager.isAppClosedGraceActive) {
      _gracePeriodManager.cancelAppClosedGracePeriod();
    }

    // Realizar actualizaci√≥n inmediata de ubicaci√≥n
    _performLocationUpdate();
  }

  /// üì± MANEJAR APP YENDO A BACKGROUND
  void _handleAppClosed() {
    debugPrint('üì± App went to background');

    // Iniciar grace period de app cerrada (30 segundos)
    _gracePeriodManager.startAppClosedGracePeriod();
  }

  /// ‚ùå MARCAR COMO AUSENTE
  Future<void> _markAsAbsent(String reason) async {
    if (_currentEvent == null) return;

    try {
      final user = await _storageService.getUser();
      if (user == null) return;

      await _asistenciaService.marcarAusente(
        usuarioId: user.id,
        eventoId: _currentEvent!.id!,
        motivo: reason,
      );

      debugPrint('‚ùå Marked as absent: $reason');

    } catch (e) {
      debugPrint('‚ùå Error marking as absent: $e');
    }
  }

  /// üîÑ ACTUALIZAR ESTADO DE APP LIFECYCLE
  void _updateAppLifecycleState() {
    // Actualizar heartbeat con estado actual de app
    _heartbeatManager.updateAppState(
      isInForeground: _isAppInForeground,
      isInGracePeriod: _gracePeriodManager.hasAnyGracePeriodActive,
    );
  }

  /// üìä CONVERTIR ESTADO DE ASISTENCIA A ESTADO DE TRACKING
  StudentTrackingStatus _getTrackingStatusFromAttendanceState(EstadoAsistencia estado) {
    switch (estado) {
      case EstadoAsistencia.presente:
        return StudentTrackingStatus.present;
      case EstadoAsistencia.ausente:
        return StudentTrackingStatus.absent;
      case EstadoAsistencia.pendiente:
        return StudentTrackingStatus.pending;
      case EstadoAsistencia.justificado:
        return StudentTrackingStatus.justified;
      case EstadoAsistencia.tarde:
        return StudentTrackingStatus.late;
      case EstadoAsistencia.inicial:
        return StudentTrackingStatus.active;
    }
  }

  /// üîÑ EMITIR ESTADO DE TRACKING
  void _emitTrackingState(StudentTrackingStatus status) {
    final state = StudentTrackingState(
      status: status,
      currentEvent: _currentEvent,
      isAppInForeground: _isAppInForeground,
      hasAnyGracePeriodActive: _gracePeriodManager.hasAnyGracePeriodActive,
      timestamp: DateTime.now(),
    );

    if (!_trackingController.isClosed) {
      _trackingController.add(state);
    }
  }

  /// üìä OBTENER ESTADO ACTUAL
  StudentTrackingState getCurrentState() {
    return StudentTrackingState(
      status: _isTrackingActive ? StudentTrackingStatus.active : StudentTrackingStatus.stopped,
      currentEvent: _currentEvent,
      isAppInForeground: _isAppInForeground,
      hasAnyGracePeriodActive: _gracePeriodManager.hasAnyGracePeriodActive,
      timestamp: DateTime.now(),
    );
  }

  /// üßπ CLEANUP
  void dispose() {
    debugPrint('üßπ Disposing StudentAttendanceManager');

    stopTracking();
    _trackingController.close();
    
    _heartbeatManager.dispose();
    _geofenceManager.dispose();
    _stateManager.dispose();
    _gracePeriodManager.dispose();
    
    debugPrint('üßπ StudentAttendanceManager disposed');
  }
}

/// ‚úÖ ESTADO DE TRACKING DE ESTUDIANTE
class StudentTrackingState {
  final StudentTrackingStatus status;
  final Evento? currentEvent;
  final bool isAppInForeground;
  final bool hasAnyGracePeriodActive;
  final DateTime timestamp;

  const StudentTrackingState({
    required this.status,
    this.currentEvent,
    required this.isAppInForeground,
    required this.hasAnyGracePeriodActive,
    required this.timestamp,
  });

  @override
  String toString() {
    return 'StudentTrackingState(status: $status, event: ${currentEvent?.titulo}, '
           'foreground: $isAppInForeground, gracePeriod: $hasAnyGracePeriodActive)';
  }
}

/// ‚úÖ ESTADOS DE TRACKING
enum StudentTrackingStatus {
  stopped,          // Tracking detenido
  active,           // Tracking activo
  present,          // Presente en el evento
  absent,           // Ausente del evento
  pending,          // Pendiente (fuera pero en tiempo)
  late,             // Lleg√≥ tarde
  justified,        // Justificado
  boundaryViolation, // Violaci√≥n de l√≠mites
}