// lib/widgets/attendance/permission_dialog_widgets.dart
import 'package:flutter/material.dart';
import 'dart:async';
import '../../services/permission_service.dart';

/// ‚úÖ PERMISSION DIALOG WIDGETS: Di√°logos de permisos cr√≠ticos preservados
/// Responsabilidades:
/// - Di√°logos no cancelables (PopScope canPop: false)
/// - Flujo secuencial: Servicios ‚Üí Preciso ‚Üí Siempre ‚Üí Bater√≠a
/// - Estilos exactos y colores preservados
/// - Validaci√≥n obligatoria sin escape
/// - Recheck autom√°tico despu√©s de configurar
class PermissionDialogWidgets {
  static final PermissionService _permissionService = PermissionService();

  /// ‚úÖ DI√ÅLOGO DE SERVICIOS DE UBICACI√ìN
  static Future<void> showLocationServicesDialog(
    BuildContext context,
    VoidCallback onPermissionConfigured,
  ) async {
    if (!context.mounted) return;
    
    return showDialog<void>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return PopScope(
          canPop: false, // No permite cerrar con back
          child: AlertDialog(
            title: Row(
              children: [
                Icon(Icons.location_off, color: Colors.red, size: 28),
                SizedBox(width: 12),
                Expanded(child: Text('üìç Ubicaci√≥n Desactivada')),
              ],
            ),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Container(
                  padding: EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.red.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.red.withValues(alpha: 0.3)),
                  ),
                  child: Row(
                    children: [
                      Icon(Icons.error_outline, color: Colors.red),
                      SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          '‚ö†Ô∏è REQUERIDO PARA ASISTENCIA',
                          style: TextStyle(
                            color: Colors.red,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                SizedBox(height: 16),
                Text('Para registrar tu asistencia necesitas:'),
                SizedBox(height: 8),
                _buildRequirementItem('üìç', 'Activar servicios de ubicaci√≥n del dispositivo'),
                SizedBox(height: 16),
                Text(
                  'Este popup seguir√° apareciendo hasta que actives la ubicaci√≥n.',
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.orange[700],
                    fontStyle: FontStyle.italic,
                  ),
                ),
              ],
            ),
            actions: [
              ElevatedButton.icon(
                onPressed: () async {
                  Navigator.of(context).pop();
                  await _permissionService.openLocationSettings();
                  // Recheck despu√©s de 2 segundos
                  Timer(Duration(seconds: 2), () {
                    onPermissionConfigured();
                  });
                },
                icon: Icon(Icons.settings),
                label: Text('Abrir Configuraci√≥n'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  foregroundColor: Colors.white,
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  /// ‚úÖ DI√ÅLOGO DE UBICACI√ìN PRECISA
  static Future<void> showPreciseLocationDialog(
    BuildContext context,
    VoidCallback onPermissionConfigured,
  ) async {
    if (!context.mounted) return;
    
    return showDialog<void>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return PopScope(
          canPop: false,
          child: AlertDialog(
            title: Row(
              children: [
                Icon(Icons.gps_not_fixed, color: Colors.orange, size: 28),
                SizedBox(width: 12),
                Expanded(child: Text('üéØ Ubicaci√≥n Precisa')),
              ],
            ),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Container(
                  padding: EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.orange.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.orange.withValues(alpha: 0.3)),
                  ),
                  child: Row(
                    children: [
                      Icon(Icons.precision_manufacturing, color: Colors.orange),
                      SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          'PRECISI√ìN REQUERIDA',
                          style: TextStyle(
                            color: Colors.orange[700],
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                SizedBox(height: 16),
                Text('Para detectar cuando entres al √°rea del evento:'),
                SizedBox(height: 8),
                _buildRequirementItem('üéØ', 'Ubicaci√≥n PRECISA (no aproximada)'),
                _buildRequirementItem('üìê', 'Para geofencing exacto'),
                SizedBox(height: 16),
                Text(
                  'Nota: Sin ubicaci√≥n precisa no se puede registrar asistencia autom√°ticamente.',
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.red[600],
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
            actions: [
              TextButton(
                onPressed: () async {
                  Navigator.of(context).pop();
                  onPermissionConfigured();
                },
                child: Text('‚ùå Rechazar'),
              ),
              ElevatedButton.icon(
                onPressed: () async {
                  Navigator.of(context).pop();
                  final granted = await _permissionService.requestPreciseLocationPermissionEnhanced();
                  if (granted) {
                    onPermissionConfigured();
                  } else {
                    // Volver a mostrar el di√°logo
                    Timer(Duration(milliseconds: 500), () {
                      onPermissionConfigured();
                    });
                  }
                },
                icon: Icon(Icons.check),
                label: Text('‚úÖ Permitir Precisa'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  /// ‚úÖ DI√ÅLOGO DE UBICACI√ìN SIEMPRE
  static Future<void> showAlwaysLocationDialog(
    BuildContext context,
    VoidCallback onPermissionConfigured,
  ) async {
    if (!context.mounted) return;
    
    return showDialog<void>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return PopScope(
          canPop: false,
          child: AlertDialog(
            title: Row(
              children: [
                Icon(Icons.access_time, color: Colors.blue, size: 28),
                SizedBox(width: 12),
                Expanded(child: Text('‚è∞ Ubicaci√≥n Todo el Tiempo')),
              ],
            ),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Container(
                  padding: EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.blue.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.blue.withValues(alpha: 0.3)),
                  ),
                  child: Row(
                    children: [
                      Icon(Icons.all_inclusive, color: Colors.blue),
                      SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          'TRACKING CONTINUO',
                          style: TextStyle(
                            color: Colors.blue[700],
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                SizedBox(height: 16),
                Text('Para asistencia autom√°tica necesitas:'),
                SizedBox(height: 8),
                _buildRequirementItem('üì±', 'Ubicaci√≥n activa aunque cambies de app'),
                _buildRequirementItem('üîÑ', 'Tracking continuo durante el evento'),
                _buildRequirementItem('‚ö°', 'Detecci√≥n inmediata de entrada/salida'),
                SizedBox(height: 16),
                Text(
                  'üí° Tranquilo: Solo se usa durante eventos activos.',
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.green[600],
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
            actions: [
              TextButton(
                onPressed: () async {
                  Navigator.of(context).pop();
                  onPermissionConfigured();
                },
                child: Text('‚ùå Solo cuando use la app'),
              ),
              ElevatedButton.icon(
                onPressed: () async {
                  Navigator.of(context).pop();
                  final granted = await _permissionService.requestAlwaysLocationPermission();
                  if (granted) {
                    onPermissionConfigured();
                  } else {
                    Timer(Duration(milliseconds: 500), () {
                      onPermissionConfigured();
                    });
                  }
                },
                icon: Icon(Icons.check),
                label: Text('‚úÖ Permitir Siempre'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  /// ‚úÖ DI√ÅLOGO DE OPTIMIZACI√ìN DE BATER√çA
  static Future<void> showBatteryOptimizationDialog(
    BuildContext context,
    VoidCallback onPermissionConfigured,
  ) async {
    if (!context.mounted) return;
    
    return showDialog<void>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return PopScope(
          canPop: false,
          child: AlertDialog(
            title: Row(
              children: [
                Icon(Icons.battery_alert, color: Colors.red, size: 28),
                SizedBox(width: 12),
                Expanded(child: Text('üîã Optimizaci√≥n de Bater√≠a')),
              ],
            ),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Container(
                  padding: EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.red.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.red.withValues(alpha: 0.3)),
                  ),
                  child: Row(
                    children: [
                      Icon(Icons.warning, color: Colors.red),
                      SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          '‚ö†Ô∏è CR√çTICO PARA ASISTENCIA',
                          style: TextStyle(
                            color: Colors.red,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                SizedBox(height: 16),
                Text('Android est√° optimizando la bater√≠a de GeoAsist.'),
                SizedBox(height: 12),
                Text('Esto causar√°:'),
                SizedBox(height: 8),
                _buildRequirementItem('‚ùå', 'App se cierre autom√°ticamente'),
                _buildRequirementItem('üíî', 'P√©rdida de asistencia registrada'),
                _buildRequirementItem('üìç', 'Tracking interrumpido'),
                SizedBox(height: 16),
                Container(
                  padding: EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.green.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(6),
                  ),
                  child: Text(
                    '‚úÖ Desactivar optimizaci√≥n = Asistencia garantizada',
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.green[700],
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ),
              ],
            ),
            actions: [
              TextButton(
                onPressed: () async {
                  Navigator.of(context).pop();
                  onPermissionConfigured();
                },
                child: Text('‚ùå Mantener Optimizaci√≥n'),
              ),
              ElevatedButton.icon(
                onPressed: () async {
                  Navigator.of(context).pop();
                  final granted = await _permissionService.requestBatteryOptimizationPermission();
                  if (granted) {
                    onPermissionConfigured();
                  } else {
                    Timer(Duration(milliseconds: 500), () {
                      onPermissionConfigured();
                    });
                  }
                },
                icon: Icon(Icons.check),
                label: Text('üîã Desactivar Optimizaci√≥n'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  /// ‚úÖ DI√ÅLOGO DE ASISTENCIA PERDIDA
  static void showAttendanceLossDialog(
    BuildContext context,
    String reason,
  ) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Text('Asistencia Perdida'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Icon(
              Icons.warning,
              color: Colors.red,
              size: 48,
            ),
            const SizedBox(height: 16),
            Text(
              'Has perdido la asistencia para este evento.\n\nMotivo: $reason',
              textAlign: TextAlign.center,
            ),
          ],
        ),
        actions: [
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              Navigator.of(context).pop(); // Volver al dashboard
            },
            child: const Text('Entendido'),
          ),
        ],
      ),
    );
  }

  /// ‚úÖ DI√ÅLOGO DE INFORMACI√ìN DEL TRACKING
  static void showTrackingInfoDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Informaci√≥n del Tracking'),
        content: const SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Caracter√≠sticas del Tracking:',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 8),
              Text('‚Ä¢ GPS preciso cada 5 segundos'),
              Text('‚Ä¢ Heartbeat al servidor cada 30 segundos'),
              Text('‚Ä¢ Detecci√≥n autom√°tica de geofence'),
              Text('‚Ä¢ Grace period de 60s por salida del √°rea'),
              Text('‚Ä¢ Grace period de 30s por cerrar app'),
              Text('‚Ä¢ Registro autom√°tico de asistencia'),
              SizedBox(height: 16),
              Text(
                'Restricciones de Seguridad:',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 8),
              Text('‚Ä¢ Ubicaci√≥n precisa obligatoria'),
              Text('‚Ä¢ Background tracking requerido'),
              Text('‚Ä¢ Cerrar app = p√©rdida de asistencia'),
              Text('‚Ä¢ Tracking continuo durante evento'),
              SizedBox(height: 16),
              Text(
                'Mant√©n la aplicaci√≥n abierta durante todo el evento para conservar tu asistencia.',
                style: TextStyle(
                  fontStyle: FontStyle.italic,
                  color: Colors.red,
                ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Entendido'),
          ),
        ],
      ),
    );
  }

  /// ‚úÖ WIDGET HELPER PARA ELEMENTOS DE REQUISITO
  static Widget _buildRequirementItem(String icon, String text) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 2),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(icon, style: TextStyle(fontSize: 16)),
          SizedBox(width: 8),
          Expanded(
            child: Text(
              text,
              style: TextStyle(fontSize: 14),
            ),
          ),
        ],
      ),
    );
  }
}