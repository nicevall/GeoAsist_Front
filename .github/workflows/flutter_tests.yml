# .github/workflows/flutter_tests.yml
# GitHub Actions workflow for automated testing

name: Flutter Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Flutter Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        flutter-version: ['3.19.0', '3.22.0']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ matrix.flutter-version }}
        channel: stable
        cache: true

    - name: Get dependencies
      run: flutter pub get

    - name: Verify the installation
      run: flutter doctor -v

    - name: Analyze project source
      run: flutter analyze

    - name: Check formatting
      run: dart format --output=none --set-exit-if-changed .

    - name: Run unit tests
      run: flutter test --coverage --reporter expanded

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: Generate coverage report
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov
        genhtml coverage/lcov.info -o coverage/html

    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.flutter-version }}
        path: coverage/html

  integration-test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.19.0'
        channel: stable
        cache: true

    - name: Get dependencies
      run: flutter pub get

    - name: Run integration tests
      run: flutter test integration_test/

    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: build/integration_test_results/

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.19.0'
        channel: stable
        cache: true

    - name: Get dependencies
      run: flutter pub get

    - name: Build APK
      run: flutter build apk --debug

    - name: Build Web
      run: flutter build web

    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: debug-apk
        path: build/app/outputs/flutter-apk/app-debug.apk

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.19.0'
        channel: stable
        cache: true

    - name: Get dependencies
      run: flutter pub get

    - name: Run dependency check
      run: flutter pub deps

    - name: Security audit
      run: |
        # Check for known vulnerabilities in dependencies
        echo "Running security audit..."
        flutter pub deps --json > deps.json
        
        # Additional security checks could be added here
        # For example, using tools like snyk or other security scanners

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.19.0'
        channel: stable
        cache: true

    - name: Get dependencies
      run: flutter pub get

    - name: Run performance tests
      run: |
        # Performance testing commands
        echo "Running performance tests..."
        
        # Memory leak detection
        flutter test --coverage test/unit/ --reporter=expanded
        
        # Build size analysis
        flutter build apk --analyze-size --target-platform android-arm64
        
        # Additional performance metrics could be collected here

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: build/performance/

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.19.0'
        channel: stable
        cache: true

    - name: Get dependencies
      run: flutter pub get

    - name: Run static analysis
      run: |
        flutter analyze --write=analyze_report.txt
        
        # Custom lint rules
        dart run custom_lint

    - name: Check test coverage threshold
      run: |
        flutter test --coverage
        
        # Check if coverage meets minimum threshold (80%)
        lcov --summary coverage/lcov.info | grep "lines" | awk '{print $2}' | sed 's/%//' > coverage_percentage.txt
        
        COVERAGE=$(cat coverage_percentage.txt)
        echo "Coverage: $COVERAGE%"
        
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below minimum threshold of 80%"
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets minimum threshold"
        fi

    - name: Upload code quality report
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-report
        path: |
          analyze_report.txt
          coverage_percentage.txt

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, integration-test, build-test, security-scan, performance-test, code-quality]
    if: always()
    
    steps:
    - name: Notification
      run: |
        echo "🧪 Test Summary:"
        echo "=================="
        echo "Unit Tests: ${{ needs.test.result }}"
        echo "Integration Tests: ${{ needs.integration-test.result }}"
        echo "Build Tests: ${{ needs.build-test.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo "Performance Tests: ${{ needs.performance-test.result }}"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.integration-test.result }}" == "success" && "${{ needs.build-test.result }}" == "success" ]]; then
          echo "🎉 All critical tests passed!"
        else
          echo "❌ Some tests failed. Please review the results."
        fi